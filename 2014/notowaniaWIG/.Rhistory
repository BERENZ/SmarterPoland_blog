power3030
dim(power0505)
100*(power0505[,23:33] > 0)
power0505[,23:33]
100*(power0505[,23:33] < 0)
100*(power0505[,23:33] < 0)
100*(power1010[,23:33] < 0)
100*(power2020[,23:33] < 0)
100*(power3030[,23:33] < 0)
D
lambda.n
table(rbinom(0.5, lambda.n))
table(rbinom(lambda.n, 0.5))
table(rbinom(lambda.n, 1, 0.5))
a1 <- rbinom(lambda.n, 1, 0.5)
a2 <- rbinom(lambda.s, 1, 0.5)
D <- matrix(c(sum(a1==0), sum(a1==1), sum(a2==0), sum(a2==1)), 2, 2)
D
D <- matrix(c(sum(a1==0), sum(a2==0), sum(a1==1), sum(a2==1)), 2, 2)
get.two.pvals <- function(lambda.n = 10, lambda.s = 4, lineages = 2, P = c(30, 30)) {
a1 <- rbinom(lambda.n, 1, 0.5)
a2 <- rbinom(lambda.s, 1, 0.5)
D <- matrix(c(sum(a1==0), sum(a2==0), sum(a1==1), sum(a2==1)), 2, 2)
c(single = MDK.test(P, D), multi = multi.MDK.test(P, D))
}
cuts <- c(5,10,15,20,25)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
i = 2
j = 4
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
PP=20
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
rowMeans(allpvals < alpha)
getP <- function(PP=20) {
cuts <- c(5,10,15,20,25, 30, 35, 40, 45)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
for (i in 1:length(cuts)) {
for (j in i:length(cuts)) {
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
power <- rowMeans(allpvals < alpha)
power1[i, j] <- power[1]
power1[j, i] <- power[1]
power2[i, j] <- power[2]
power2[j, i] <- power[2]
}
}
colnames(power1) <- cuts
rownames(power1) <- cuts
colnames(power2) <- cuts
rownames(power2) <- cuts
cbind(power1, power2, power1 - power2)*100
}
getP <- function(PP=20) {
cuts <- c(5,10,15,20,25, 30, 35, 40, 45)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
for (i in 1:length(cuts)) {
for (j in i:length(cuts)) {
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
power <- rowMeans(allpvals < alpha)
power1[i, j] <- power[1]
power1[j, i] <- power[1]
power2[i, j] <- power[2]
power2[j, i] <- power[2]
}
}
colnames(power1) <- cuts
rownames(power1) <- cuts
colnames(power2) <- cuts
rownames(power2) <- cuts
cbind(power1, power2, power1 - power2)*100
(power1 - power2)*100
}
(power0505 <- getP(5))
(power1010 <- getP(10))
(power2020 <- getP(20))
(power3030 <- getP(30))
getP <- function(PP=20) {
cuts <- c(5,10,15,20,25, 30, 35, 40, 45, 50, 55)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
for (i in 1:length(cuts)) {
for (j in i:length(cuts)) {
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
power <- rowMeans(allpvals < alpha)
power1[i, j] <- power[1]
power1[j, i] <- power[1]
power2[i, j] <- power[2]
power2[j, i] <- power[2]
}
}
colnames(power1) <- cuts
rownames(power1) <- cuts
colnames(power2) <- cuts
rownames(power2) <- cuts
cbind(power1, power2, power1 - power2)*100
(power1 - power2)*100
}
(power0505 <- getP(5))
(power1010 <- getP(10))
getP <- function(PP=20) {
cuts <- c(5,10,15,20,25, 30, 35, 40, 45, 50, 55)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
for (i in 1:length(cuts)) {
for (j in i:length(cuts)) {
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
power <- rowMeans(allpvals < alpha)
power1[i, j] <- power[1]
power1[j, i] <- power[1]
power2[i, j] <- power[2]
power2[j, i] <- power[2]
}
}
colnames(power1) <- cuts
rownames(power1) <- cuts
colnames(power2) <- cuts
rownames(power2) <- cuts
cbind(power1, power2, power1 - power2)*100
#  (power1 - power2)*100
}
(power0505 <- getP(5))
(power1010 <- getP(10))
(power2020 <- getP(20))
(power3030 <- getP(30))
100*(power0505[,23:33] < 0)
100*(power1010[,23:33] < 0)
100*(power2020[,23:33] < 0)
100*(power3030[,23:33] < 0)
D
a1 <- rbinom(lambda.n, 1, 0.5)
a2 <- rbinom(lambda.s, 1, 0.5)
D <- matrix(c(sum(a1==0), sum(a2==0), sum(a1==1), sum(a2==1)), 2, 2)
D
P
MDK.test(P, D)
rowSums(D)
getP <- function(PP=30) {
cuts <- c(1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 32)
power1 <- matrix(0, length(cuts), length(cuts))
power2 <- matrix(0, length(cuts), length(cuts))
for (i in 1:length(cuts)) {
for (j in i:length(cuts)) {
allpvals <- replicate(Nrep, get.two.pvals(cuts[j], cuts[i], 2, P = c(PP,PP)))
power <- rowMeans(allpvals < alpha)
power1[i, j] <- power[1]
power1[j, i] <- power[1]
power2[i, j] <- power[2]
power2[j, i] <- power[2]
}
}
colnames(power1) <- cuts
rownames(power1) <- cuts
colnames(power2) <- cuts
rownames(power2) <- cuts
cbind(power1, power2, power1 - power2)*100
}
(power0505 <- getP(5))
(power1010 <- getP(10))
(power2020 <- getP(20))
(power3030 <- getP(30))
100*(power0505[,23:33] < 0)
100*(power1010[,23:33] < 0)
100*(power2020[,23:33] < 0)
100*(power3030[,23:33] < 0)
library(Hmisc)
library(MAS)
library(MASS)
?fitdistr
x <- rgamma(100, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
install.packages("opVaR")
library("opVaR")
opVaR:::loss.fit.distr
opencpu$browse("library/AgentExperiment/www")
library(opencpu)
opencpu$browse("library/AgentExperiment/www")
opencpu$browse("library/AgentExperiment/inst/www")
opencpu$browse("library/AgentExperiment/inst/www")
opencpu$browse("library/AgentExperiment/ext/www")
opencpu$browse("library/AgentExperiment/ext/www")
opencpu:::opencpu$restart()
opencpu:::opencpu$restart()
library(devtoos)
library(devtools)
install_github("archivist/pbiecek")
install_github("pbiecek/archivist")
library("archivist")
myRepo <- 'test'
createEmptyRepo( dir = myRepo )
?createEmptyRepo
createEmptyRepo( myRepo, TRUE)
saveToRepo(iris, repoDir = myGitRepo)
saveToRepo(iris, repoDir = myRepo)
saveToRepo(iris, repoDir = myRepo)
saveToRepo(iris, repoDir = myRepo)
?stop
warning("a")
(iris_md5hash  <- searchInLocalRepo( tag = "name:iris", dir = myRepo))
(iris_md5hash  <- searchInLocalRepo( tag = "name:iris", myRepo))
(iris_md5hash  <- searchInLocalRepo( tag = "name:iri", myRepo))
(iris_md5hash  <- searchInLocalRepo( tag = "name:iri.", myRepo))
?searchInLocalRepo
(iris_md5hash  <- searchInLocalRepo( "class:data.frame", myRepo))
cache <- function(FUN, ...) {
browse()
}
cache(lm, data=iris, Petal.Length~Species)
cache <- function(FUN, ...) {
browser()
}
cache(lm, data=iris, Petal.Length~Species)
list(...)
digest(list(...))
0
library(archivist)
cache <- function(FUN, ...) {
browser()
}
cache(lm, data=iris, Petal.Length~Species)
digest(list(...))
FUN
tmpl <- list(...)
tmpl$.FUN <- FUN
digest(tmp)
digest(tmpl)
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
outputHash <- digest(tmpl)
searchInLocalRepo(outputHash, cacheRepo)
output <- do.call(FUN, ...)
?do.call
output <- do.call(FUN, list(...))
attr( output, "tags")
attr( output, "tags") <- paste0("cacheId:", outputHash)
attr( output, "tags")
0
cache <- function(cacheRepo, FUN, ...) {
browser()
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, cacheRepo)
output
}
cache(lm, data=iris, Petal.Length~Species)
0
0
cache <- function(cacheRepo, FUN, ...) {
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, cacheRepo)
output
}
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(lm, data=iris, Petal.Length~Species)
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
cache <- function(cacheRepo, FUN, ...) {
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE)
output
}
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
cache <- function(cacheRepo, FUN, ...) {
browser()
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE)
output
}
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE)
?saveToRepo
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE)
traceback()
?parent.frame
sys.nframe()
0
0
cache <- function(cacheRepo, FUN, ...) {
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE, rememberName = FALSE)
output
}
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
options(error=recover)
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
library(devtools)
install_github("pbiecek/archivist")
install_github("pbiecek/archivist", build_vignettes=FALSE)
źlibrRY(PORTÉGÉ Z30-A)
library(archivist)
cache <- function(cacheRepo, FUN, ...) {
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE, rememberName = FALSE)
output
}
cacheRepo <- tempdir()
createEmptyRepo( cacheRepo )
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
ls()
X
executeSingleQuery
query
output
cache <- function(cacheRepo, FUN, ...) {
tmpl <- list(...)
tmpl$.FUN <- FUN
outputHash <- digest(tmpl)
isInRepo <- searchInLocalRepo(paste0("cacheId:", outputHash), cacheRepo)
if (length(isInRepo) > 0)
return(loadFromLocalRepo(isInRepo[1], repoDir = cacheRepo, value = TRUE))
output <- do.call(FUN, list(...))
attr( output, "tags") <- paste0("cacheId:", outputHash)
attr( output, "call") <- ""
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE, rememberName = FALSE)
output
}
cache(cacheRepo, lm, data=iris, Petal.Length~Species)
attr(output)
output
output
attr(output)
attrd(output)
attrs(output)
attributes(output)
saveToRepo(output, repoDir = cacheRepo, archiveData = TRUE, archiveMiniature = FALSE, rememberName = FALSE)
ls()
tag
setwd("/Users/pbiecek/Dropbox/notowaniaWIG/")
library(xlsx)
library(xlsx)
WIG <- read.xlsx("PL9999999995.xls", sheetIndex = 1)
head(WIG)
24364.44 / 24306.21
24838.55 / 24537.05
summary(WIG$Zmiana)
hist(WIG$Zmiana)
plot(ecdf(WIG$Zmiana))
plot(ecdf(WIG$Zmiana), las=1)
boxplot(WIG$Zmiana)
plot(ecdf(WIG$Zmiana), las=1)
WIG20 <- read.xlsx("PL9999999987.xls", sheetIndex = 1)
plot(ecdf(WIG20$Zmiana), las=1)
WIG20[WIG20$Zmiana < -5,]
tail(WIG20)
table(WIG20$Zmiana < -1.86)
prop.table(table(WIG20$Zmiana < -1.86))
plot(WIG20$Zmiana)
plot(WIG20$Zmiana, type="l")
abline(h = -1.86)
library(ggplot2)
ggplot(WIG20$, aes(x=Data, y=Zmiana)) +
geom_line()
ggplot(WIG20, aes(x=Data, y=Zmiana)) +
geom_line()
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line()
class(WIG20$Data)
WIG20$Data <- as.Date(as.character(WIG20$Data))
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line()
install.packages("ggthemes")
library(ggthemes)
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte()
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_hline(yinterept=-1.86)
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_hline(yintcerept= -1.86, col="red")
WIG20$Data <- as.Date(as.character(WIG20$Data))
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_hline(yintercept= -1.86, col="darkred")
pl <- ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_hline(yintercept= -1.86, col="darkred")
pl <- ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_hline(yintercept= -1.86, col="darkred")
ggsave(pl, file="wykres.png", 720,720)
ggsave(pl, file="wykres.png", width = 720, height=720)
ggsave(pl, file="wykres.png", width = 7.2, height=7.2, dpi = 100)
ggsave(pl, file="wykres.png", width = 7.2*2, height=10, dpi = 100)
tail(WIG20
)
tail(WIG)
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth() +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.1) +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.1, method="loess") +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(WIG20, aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.1, method="loess", se=TRUE) +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.1, method="loess", se=TRUE) +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_point() + theme_tufte() +
geom_smooth(span=0.1, method="loess", se=TRUE) +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_point() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= -1.86, col="darkred")
ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_point() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
mean(WIG20$Zmiana < -1.86)
pl2 <- ggplot(tail(WIG20,200), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
ggsave(pl2, file="wykres2.png", width = 7.2*2, height=10, dpi = 100)
ggplot(tail(WIG20,180), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
ggplot(tail(WIG20,170), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
pl2 <- ggplot(tail(WIG20,170), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
ggsave(pl2, file="wykres2.png", width = 7.2*2, height=10, dpi = 100)
ggplot(tail(WIG20,170), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + geom_point() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
pl2 <- ggplot(tail(WIG20,170), aes(x=Data, y=Zmiana, group= Nazwa)) +
geom_line() + geom_point() + theme_tufte() +
geom_smooth(span=0.4, method="loess", se=TRUE) +
geom_hline(yintercept= 0, col="gray")
ggsave(pl2, file="wykres2.png", width = 7.2*2, height=10, dpi = 100)
tail(WIG20)
