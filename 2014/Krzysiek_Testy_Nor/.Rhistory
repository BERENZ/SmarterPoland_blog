library("EnvStats", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
library("PoweR", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
set.seed(24);r <- gensample(2,50,law.pars=c(0,1))
r[1:8]
r[1:8]$sample[1:5]
set.seed(24);u <- gensample(2,50,law.pars=c(0,1))
u[1:8]$sample[1:5]
getindex(c(2))
getindex(2
)
e <- gensample(2, 50, law.pars = c(0, 1))$sample
e
getindex(c(2))
getindex(c(5))
e <- gensample(5, 100, law.pars = c(3,5))$sample
pvalueMC(s, stat.index = 21, null.law.index = 2, M = 10^4, alter = 4,null.law.pars=c(shape=3,rate=5))
pvalueMC(e, stat.index = 21, null.law.index = 5, M = 10^4, alter = 4,null.law.pars=c(shape=3,rate=5))
shapiro.test(e)
library("VGAM", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
s
set.seed(24);e=rnorm(50,0,1)
statcompute(45, e)
y=e
ldata <- data.frame(y = rlaplace(nn <- 100, loc = 2, scale = exp(1)))
fit <- vglm(y  ~ 1, laplace, ldata, trace = TRUE, crit = "l")
coef(fit, matrix = TRUE)
Coef(fit)
ks.test(y,"plaplace",locarion=1.973112,scale=1.033814)
ks.test(y,"plaplace",location=1.973112,scale=1.033814)
ks.test(y,"plaplace",location=1.973112,scale=exp(1.033814)
)
ks.test(y,"plaplace",location=median(y),scale=sd(y)/sd(2))
ks.test(y,"plaplace",location=median(y),scale=sd(y)/sqrt(2))
statcompute(45, y)
getindex(,45)
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3,null.law.index=c(location=median(y),scale=sd(y)/sqrt(2)))
getindex(1)
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3,null.law.index=c(mu=median(y),b=sd(y)/sqrt(2)))
median(y)
sd(y)/sqrt(2)
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3,null.law.index=c(mu=-0.09303522,b=0.6791697)
)
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3,null.law.index=c(mu=-0.09303522,b=0.6791697))
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3)
pvalueMC(y, stat.index = 45, null.law.index = 1, M = 10^4,alter=3,null.law.pars=c(mu=-0.09303522,b=0.6791697))
ks.test(y,"plaplace",location=median(y),scale=sd(y)/sqrt(2))
pvalueMC(y, stat.index = 42, null.law.index = 1, M = 10^4,alter=3,null.law.pars=c(mu=-0.09303522,b=0.6791697))
library("qualityTools", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
pvalueMC(y, stat.index = 42, null.law.index = 1, M = 10^4,alter=3)
pvalueMC(y, stat.index = 42, null.law.index = 2, M = 10^4,alter=3)
adSim(y,"cauchy",NA)
adSim(y,"cauchy")
adSim(y,"cauchy")
library("ADGofTest", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
ad.test(y,pcauchy,-0.11640547,    0.43476081)
ad.test(y,pcauchy,-0.1295391 , 0.4761920)
detach("package:ADGofTest", unload=TRUE)
library("nortest", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:nortest", unload=TRUE)
library("dbEmpLikeGOF", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
set.seed(365);w=rnorm(50,0,1)
dbEmpLikeGOF(w, testcall="normal")
a=replicate(10000,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
mean(a<.05)
set.seed(458);w=rnorm(50,0,1)
dbEmpLikeGOF(w, testcall="normal")
a=replicate(10000,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
mean(a<.05)
set.seed(504);w=rnorm(50,0,1)
m= replicate(10000,shapiro.test(sample(w,50,T))$p.value)
n= replicate(10000,pearson.test(sample(w,50,T))$p.value)
mean(m<.05)
mean(n<.05)
set.seed(504);w=rnorm(50,0,1)
dbEmpLikeGOF(w, testcall="normal")
a=replicate(10000,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
mean(a<.05)
dbEmpLikeGOF(w, testcall="normal")
library("nortest", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
sw= NULL; p= NULL; db=NULL
for(i in 1:3000) {
set.seed(i)
x <- rnorm(50, 0, 1)
sw[i] <- shapiro.test(x)$p.value
p[i] <- pearson.test(x)$p.value
db[i] <- dbEmpLikeGOF(x, testcall="normal")$pvalue
}
# które ziarna spełniają warunek:
d=data.frame(sw,p); dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
d=data.frame(sw,p,db); dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
sw= NULL; p= NULL; db=NULL
for(i in 3000:6000) {
set.seed(i)
x <- rnorm(50, 0, 1)
sw[i] <- shapiro.test(x)$p.value
p[i] <- pearson.test(x)$p.value
db[i] <- dbEmpLikeGOF(x, testcall="normal")$pvalue
}
d=data.frame(sw,p,db); dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
d[1:5]
d[1:5,]
sw= NULL; p= NULL; db=NULL
for(i in 1:1000) {
set.seed(i)
x <- rnorm(50, 0, 1)
sw[i] <- shapiro.test(x)$p.value
p[i] <- pearson.test(x)$p.value
db[i] <- dbEmpLikeGOF(x, testcall="normal")$pvalue
}
d=data.frame(sw,p,db)
d[1:5,]
dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
sw= NULL; p= NULL; db=NULL
for(i in 1000:5000) {
set.seed(i)
x <- rnorm(50, 0, 1)
sw[i] <- shapiro.test(x)$p.value
p[i] <- pearson.test(x)$p.value
db[i] <- dbEmpLikeGOF(x, testcall="normal")$pvalue
}
d=data.frame(sw,p,db); dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
d[1:6]
d[1:6,]
library("SuppDists", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
sw= NULL; p= NULL; db=NULL
for(i in 1:2000) {
set.seed(i)
fit <- JohnsonFit(t=c(0, 1, -0.2, 2.2),moment="use")
x <- rJohnson(50,fit)
sw[i] <- shapiro.test(x)$p.value
p[i] <- pearson.test(x)$p.value
db[i] <- dbEmpLikeGOF(x, testcall="normal")$pvalue
}
d=data.frame(sw,p,db); dd=subset(d,sw>=0.05 & p<=0.002 & db<=0.02)
dd
d[1:5,]
set.seed(504)
fit <- JohnsonFit(t=c(0, 1, -0.2, 2.2),moment="use")
w <- rJohnson(50,fit)
m= replicate(10000,shapiro.test(sample(w,50,T))$p.value)
n= replicate(10000,pearson.test(sample(w,50,T))$p.value)
mean(m<.05)
mean(n<.05)
set.seed(2)
fit <- JohnsonFit(t=c(0, 1, -0.2, 2.2),moment="use")
w <- rJohnson(50,fit)
m= replicate(10000,shapiro.test(sample(w,50,T))$p.value)
n= replicate(10000,pearson.test(sample(w,50,T))$p.value)
mean(m<.05)
mean(n<.05)
dbEmpLikeGOF(w, testcall="normal")
a=replicate(10000,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
mean(a<.05)
d[1:6,]
plot(density(w))
curve(dnorm(x,mean(w),sd(w)),add=TRUE,col="darkred")
h= replicate(10000,sf.test(sample(w,50,T))$p.value);mean(h<.05)
h= replicate(10000,ad.test(sample(w,50,T))$p.value);mean(h<.05)
h= replicate(10000,cvm.test(sample(w,50,T))$p.value);mean(h<.05)
h= replicate(10000,lillie.test(sample(w,50,T))$p.value);mean(h<.05)
options(warn=-1)
a=replicate(2,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
options(warn=0)
a=replicate(2,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
options(warn=1)
a=replicate(2,dbEmpLikeGOF(sample(w,50,T), testcall="normal")$pvalue)
dbEmpLikeGOF(w, testcall="normal")
dbEmpLikeGOF(w, testcall="normal",pvl.Table=FALSE)
MOCsw=replicate(10000,pearson.test(sample(w,50,T))$p.value)
mean(MOCsw<0.05)
MOCsw=replicate(10000,shapiro.test(sample(w,50,T))$p.value)
mean(MOCsw<0.05)
library("EnvStats", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
qqPlot(rnorm(100))
library("ggplot2", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
dat <- with(density(rnorm(100)), data.frame(x, y))
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_area(mapping = aes(x = ifelse(x> -1 & x< 0 , x, 0)),
fill = "orange", alpha = 0.3)+
geom_line(col="orange",size=2)+
stat_function(fun=dnorm,arg= list(mean= 0, sd= 1),col="black",alpha=0.6,size=2)+
scale_y_continuous(limits = c(0, max(dat$y)))+xlim(-3.5,3.5)
x=seq(-4,5,0.01);y=dnorm(x,2,1)
dat <- data.frame(x=x,y=y)
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_area(mapping = aes(x = ifelse(x> -1 & x< 2.5 , x, 0)),
fill = "yellow", alpha = 0.5)+
geom_line(col="orange",size=2)+
scale_y_continuous(limits = c(0, max(dat$y)))+
annotate("text", x=-2, y=0.3, parse=TRUE, size=8,family="serif",fontface="italic",
label="'Function: ' * y==frac(1, sqrt(2*pi)) * e^{-x^2/2}")
ggplot(s)+geom_boxplot()
s=rnorm(100,0,1)
ggplot(s)+geom_boxplot()
s=rnorm(100,0,1);data.frame(s=s)
ggplot(data=s,aes(s))+geom_boxplot()
s=rnorm(100,0,1);f=factor(rep(1,each=100));d=data.frame(s=s,f=f)
ggplot(data=d,aes(f,s))+geom_boxplot()
ggplot(data=d,aes(f,s),fill="orange")+geom_boxplot()+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange")+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",size=1)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",size=1,alpha=0.6)+ coord_flip()
s=rnorm(100,0,1);f=factor(rep(1,each=100));d=data.frame(s=s,f=f)
y= quantile(s, c(0.25, 0.75))
x= qnorm(c(0.25, 0.75), mean(s), sd(s))
slope= diff(y) / diff(x)
int= y[1L] - slope * x[1L]
# wykres kwantylowy :
QQP= ggplot(NULL, aes(sample= s))+
stat_qq(distribution= qnorm , dparams= list(mean= mean(s), sd= sd(s)),
colour= "orange")+ geom_abline(slope= slope, intercept= int, size=2,alpha=0.6)
BOX= ggplot(data=d,aes(f,s),fill="orange")+geom_boxplot()+ coord_flip()
QQP
QQP= ggplot(NULL, aes(sample= s))+
stat_qq(distribution= qnorm , dparams= list(mean= mean(s), sd= sd(s)),
colour= "orange",size=2)+ geom_abline(slope= slope, intercept= int, size=2,alpha=0.6)
QQP
QQP= ggplot(NULL, aes(sample= s))+
stat_qq(distribution= qnorm , dparams= list(mean= mean(s), sd= sd(s)),
colour= "orange",size=3)+ geom_abline(slope= slope, intercept= int, size=2,alpha=0.6)
QQP
BOX
ggplot(data=d,aes(f,s),colour="orange")+geom_boxplot()+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(foll="orange",alpha=0.6)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",alpha=0.6)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",alpha=0.6,size=2)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",alpha=0.6,size=1)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",alpha=0.3,size=1)+ coord_flip()
ggplot(data=d,aes(f,s))+geom_boxplot(fill="orange",alpha=0.5,size=1)+ coord_flip()
plot(s)
plot(density(s))
curve(dnorm(x,mean(s),sd(s)))
plot(density(s));curve(dnorm(x,mean(s),sd(s)),add=T)
hist(s,prob=T)
plot(density(s));curve(dnorm(x,mean(s),sd(s)),add=T)
set.seed(24)
s=rnorm(50,0,1)
plot(density(s));curve(dnorm(x,mean(s),sd(s)),add=T)
dat <- with(density(rnorm(100)), data.frame(x, y))
ggplot(data = dat, mapping = aes(x = x, y = y)) +
geom_area(mapping = aes(x = ifelse(x> -1 & x< 0 , x, 0)),
fill = "orange", alpha = 0.3)+
geom_line(col="orange",size=2)+
stat_function(fun=dnorm,arg= list(mean= 0, sd= 1),col="black",alpha=0.6,size=2)+
scale_y_continuous(limits = c(0, max(dat$y)))+xlim(-3.5,3.5)
library("exptest", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
?rexp
library("fitdistrplus", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
p=rexp(100,2)
p
fitdist(p, "gamma")
fitdist(p, "exp")
fitdist(p, "chisqr")
?pchisqr
?pgamma
fitdist(p, "chisq")
fitdist(p, "chi-squared",start=list(df=mean(p)))
fitdist
fitdist(p, "chi-squared",start=list(df=mean(p)))
fitdist(p, "dchi-squared",start=list(df=mean(p)))
set.seed(24);s=rgamma(50,1,3)
fitdist(p, "gamma")
fitdist(p, "exp")
fitdist(s, "gamma")
fitdist(s, "exp")
1/mean(s)
mean(s)^2/var(s)
(mean(s)^2)/var(s)
(mean(s))/var(s)
curve(dgamma(x,0.8664247,2.3359411),add=TRUE,0,10)
curve(dgamma(x,0.8664247,2.3359411),0,10)
curve(dgamma(x,0.8664247,2.3359411),0,10,lwd=3)
curve(dgamma(x,0.8664247,2.3359411),0,10,lwd=5)
curve(dexp(x,2.696065),add=TRUE,0,5,col="darkred")
curve(dgamma(x,0.8664247,2.3359411),0,10,lwd=5)
curve(dexp(x,2.696065),add=TRUE,0,5,col="darkred",lwd=2)
ks.test(s,"pgamma",0.8664247,2.3359411)
ks.test(s,"pexp",2.696065)
ks.exp.test(s)
ks.exp.test(s)
ks.exp.test(s,nrepl=10000)
wp.exp.test(s)
ep.exp.test(s)
shapiro.exp.test(s, nrepl=10000)
cvm.exp.test(s, nrepl=10000)
cvm.exp.test(s, nrepl=2000)
set.seed(28)
g = rgamma(100, scale = 2, shape = 1)
shapiro.exp.test(s)$p.value
m=replicate(10000,ep.exp.test(sample(g,100,T))$p.value)
mean(m<0.05)
m=replicate(10000,shapiro.exp.test(sample(g,100,T))$p.value)
m=replicate(10000,shapiro.exp.test(sample(g,100,T),nrepl=1000)$p.value)
m=replicate(10000,shapiro.exp.test(sample(g,50,T),nrepl=1000)$p.value)
ep.exp.test(s,nrep=10000)$p.value
ep.exp.test(s,nrep=10000)
ep.exp.test(s,nrep=10000)
ep.exp.test(s,nrep=10000,simulate.p.value=TRUE)
ep.exp.test(s,nrep=10000,simulate.p.value=TRUE)
library("qualityTools", lib.loc="/home/krz/R/x86_64-pc-linux-gnu-library/3.0")
adSim(x, distribution = "normal", b = 10000)
adSim(s, distribution = "normal", b = 10000)
ad.test(s)
nortest::ad.test(s)
a=rnorm(50)
nortest::ad.test(s)
nortest::ad.test(a)
ad.test(a)
adSim(a, distribution = "normal", b = 10000)
adSim(s, distribution = "exponential", b = 10000)
